---
title: Choc 
layout: default
---
%script{:src => "/scripts/choc/two-annotations.js"}
%script{:src => "/scripts/vendor/jquery.joyride-2.1.js"}
%script{:src => "/scripts/examples/parabola-client.js"}
%script{:src => "/scripts/examples/parabola-client-timeline.js"}
%script{:src => "/scripts/examples/triangle-fan-timeline.js"}
%script{:src => "/scripts/examples/bouncing-ball.js"}

%header
  .row
    .large-6.columns.title-container
      %h1#title 
        Choc
      #subtitle
        Traceable programming
    .large-6.columns.description
      %p
        Choc is a tool for thinking powerful thoughts by stepping through code.
        It is an implementation of several ideas found in Bret Victor's 
        %span.proper
          %a{:href => "http://worrydream.com/LearnableProgramming/"}
            Learnable Programming.

.row
  .large-12.large-centered.columns
    %h2
      Demo 1 — 
      %b
        Show each step

    .choc-wrapper#demo-1
      .canvas-container.x-canvas
        #parabola-canvas
      #choc-editor-for-parabola.canvas-editor

.row
  .large-1.columns
    &nbsp;
  .large-10.columns
    %p
      Thinking procedurally is one of the hardest concepts to grasp for the beginning programmer.

    %p 
      Choc is a toolkit for teachers to craft small demos that can be explored interactively.

    %p
      Choc is different from other "live-coding" environments in that each step of the execution is controled by the learner.

    %blockquote
      Choc is a tool-to-think-with.

    %p
      The first example above shows the most fundimental features of Choc:

      %ul
        %li
          The ability to "scrub" through each step of a program

        %li
          A clear description of what each step is doing

        %li
          The ability to drag constants and see their effect

        %li
          Completely editable code

  .large-1.columns
    &nbsp;

.row
  .large-12.large-centered.columns
    %h2
      Demo 2 — 
      %b
        Make the flow visible

    .choc-wrapper
      .canvas-container.x-canvas
        #parabola-timeline-canvas
      #choc-editor-for-parabola-with-timeline.canvas-editor

.row
  .large-1.columns
    &nbsp;
  .large-10.columns
    %p
      Code is often pasted into web-pages and this provides us no advantage over paper.

    %p
      Choc provides a framework to use the computer to teach programs in a way that no book can. By showing the flow of a program explicitly we can build new intellectual structures for thinking about how procedures run.

    %p
      Many people who are able to become programmers have an aptitute for envisioning weaves of procedural flow in their mind. Choc makes procedure flow tangible. 

    %p
      In the timeline above we can relate to the program flow "geometrically" by seeing patterns in the timeline. 


  .large-1.columns
    &nbsp;


.row
  .large-12.columns
    %h2
      Demo 3 — 
      %b
        Show the state

    .choc-wrapper
      .canvas-container
        #triangle-fan-2-canvas
      #choc-editor-for-triangle-fan-2.canvas-editor

.row
  .large-1.columns
    &nbsp;
  .large-10.columns

    %p
      %em
        Click on the slider and then use the arrow keys to step through the code.

    %p
      As we show the flow
      %em structure
      we can also show step
      %em content.

    %p
      Looking at the code above, the 
      %tt triangle.fill
      line is impossibly dense. 

      If you had only the code to read, you might be able to tell that we're setting the 
      %tt fill
      of a 
      %tt triangle
      to a string that is an rgb value that changes with 
      %tt i
      \.
      But good luck trying to find out what color that actually is.

    %p
      With Choc, we can annotate 
      %em any library 
      to give us custom descriptions and timeline rendering.
      In the timeline above you can see rich cells that display 
      %b rotation
      , 
      %b shape
      , and 
      %b color
      \.


  .large-1.columns
    &nbsp;


.row
  .large-12.columns
    %h2
      Demo 4 — 
      %b
        Make time tangible

    .choc-wrapper
      .canvas-container
        .canvas-wrapper
          #frameCanvas
          #fader
          #previewCanvas

      #choc-editor-for-bouncing-ball.canvas-editor

.row
  .large-1.columns
    &nbsp;
  .large-10.columns
    %p
      Propositional content of programming is important, but it's only a part of a programmer's body of knowledge. We're also interested in knowledge that is more qualitative.

    %p
      Choc helps learners draw pathways from action-ways-of-knowing to symbolic-ways-of-knowing.
      You acquire action-knowledge by toying with the elements of an idea. Here, because we're able to play with the symbols, our action-knowledge is directly transferrable to symbolic-knowledge.  
      
    %p
      Try dragging around the constants above. Can you find the constant that relates to "bounciness"? There are two variables above that relate to the "floor". Can you find them?


  .large-1.columns
    &nbsp;


.row
  .large-12.columns
    %h2
      Demo 5 — 
      %b
        Build a (mental) model

    -# http://fgnass.github.io/spin.js/#?lines=13&length=40&width=10&radius=12&corners=1.0&rotate=0&trail=76&speed=1.2&direction=1&hwaccel=on

    %a{:href => "#"}
      %img{:src => "/images/voxel-preload-play.png"}

    .choc-wrapper
      .canvas-container
        #game
      #choc-editor-for-voxel.canvas-editor

.row
  .large-1.columns
    &nbsp;
  .large-10.columns
    %p
      %em
        In the Voxel world, use arrow keys to navigate. Use the 
        %tt space 
        button to jump. Hit 
        %tt space 
        twice to fly. Use 
        %tt shift 
        to move towards the ground. 

    %p
      Choc isn't limited to 2D canvas examples. Above we're interacting with a 
      %a{:href => "http://voxeljs.com/"} Voxel.js
      world. The Choc scrubbing loop is independent of the game loop.

    %p
      In this example, we're building a tower by 
      %a{:href => "https://banu.com/blog/7/drawing-circles/"} "drawing" a circle
      higher and higher.

    %p
      We don't have to build a 
      %tt "brick"
      tower though. Try changing the first line to
      %tt "grass"
      or 
      %tt "bark"
      \. Try dragging the
      %tt radius
      or 
      %tt height
      \. 
        


    %p
      seek to augment what is learnable and teachable.

      There are currently very poor tools for helping people grow the aptitute to think procedurally.
      
      Choc encourages exploration and reflection

      Explore the properties of a chosen microhold. Hopefully as one learns to explore the properties of a microworld, they'll learn to transfer habits of exploration into the rest of their lives.

      Gives you the ability to explore ideas without a bug being "wrong", bad or a mistake

    %p 
      How to create your own examples
      Choc examples should be created in mind-sized bites.

      getting to know an idea, exploring an area of knowledge, and acquiring sensitivity to distinctions that seem ungraspably subtle 

      By showing how the structure of a program can be decomposed into simpler, but still meaningful and coherant,structures, we're able to show a pathway into how an algorithm works.

      In our culture number is richly represented, systematic procedure is poorly represented.

  .large-1.columns
    &nbsp;


.row
  .large-1.columns
    &nbsp;
  .large-10.columns
    %p
      This falls short of Bret Victor's original design. There are many things to be done [think to github]
    %p
      Installation instructions
  .large-1.columns
    &nbsp;


.row
  .large-1.columns
    &nbsp;
  .large-10.columns
    %p
      Newsletter signup
  .large-1.columns
    &nbsp;

.row
  .large-1.columns
    &nbsp;
  .large-10.columns
    %p
      Made by Nate Murray & Ari Lerner in San Francisco - Fullstack.io

  .large-1.columns
    &nbsp;



.row
  .large-1.columns
    &nbsp;
  .large-10.columns
    %p
      %tt
        Choc
      aims to help learners gain a deep insight into how a program 
      %em
        runs
      by
      %em 
        providing human descriptions of each line of code that runs,
      %em
        making the flow tangible by allowing you to scrub through each step
      %em 
        making the flow visible by xxx
      %em
        showing the data of each line of code 

    %p

  .large-1.columns
    &nbsp;

.row
  .large-12.large-centered.columns
    #messages

/* Tour
%ol#tourGuide
  %li{:'data-tour' => 'slider'} 
    %p Sliding to step forwards (and backwards) in time
  %li{:'data-tour' => 'numberslider'} 
    %p Try dragging the numbers with underlines
  %li{:'data-tour' => 'editor'} 
    %p The code is fully editable
%script{:src => "/scripts/index/tour.js"}
