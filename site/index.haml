---
title: Choc 
layout: default
---
%script{:src => "/scripts/choc/two-annotations.js"}
%script{:src => "/components/opentip/lib/opentip.js"}
%script{:src => "/components/opentip/lib/adapter-jquery.js"}
%script{:src => "/scripts/examples/parabola-client.js"}
%script{:src => "/scripts/examples/parabola-client-timeline.js"}
%script{:src => "/scripts/examples/triangle-fan-timeline.js"}
%script{:src => "/scripts/examples/bouncing-ball.js"}
%script{:src => "/scripts/vendor/voxel-garden.js"}
%script{:src => "/scripts/examples/voxel-game.js"}


%header
  .row
    .large-6.columns.title-container
      %h1#title 
        Choc
      #subtitle
        Traceable programming
    .large-6.columns.description
      %p
        Choc is a tool for thinking powerful thoughts by stepping through code.
        It is an implementation of several ideas found in Bret Victor's 
        %span.proper
          %a{:href => "http://worrydream.com/LearnableProgramming/"}
            Learnable Programming.

.row
  .large-12.large-centered.columns
    %h2
      Demo 1 — 
      %b
        Show each step

    .choc-wrapper#demo-1
      .canvas-container.x-canvas
        #parabola-canvas
      #choc-editor-for-parabola.canvas-editor

.row
  .large-1.columns
    &nbsp;
  .large-10.columns
    %p
      Thinking procedurally is one of the hardest concepts to grasp for the beginning programmer.

    %p 
      Choc is a toolkit for teachers to craft small demos that can be explored interactively.

    %p
      Choc is different from other "live-coding" environments in that each step of the execution is controled by the learner.

    %blockquote
      Choc is a tool designed to augment the thinking process.

    %p
      The first example above shows the most fundimental features of Choc:

      %ul
        %li
          The ability to "scrub" through each step of a program

        %li
          A clear description of what each step is doing

        %li
          The ability to drag constants and see their effect

        %li
          Completely editable code

  .large-1.columns
    &nbsp;

.row
  .large-12.large-centered.columns
    %h2
      Demo 2 — 
      %b
        Make the flow visible

    .choc-wrapper
      .canvas-container.x-canvas
        #parabola-timeline-canvas
      #choc-editor-for-parabola-with-timeline.canvas-editor

.row
  .large-1.columns
    &nbsp;
  .large-10.columns
    %p
      Code is often pasted into web-pages and this provides us no advantage over paper.

    %p
      Choc provides a framework to use the computer to teach programs in a way that no book can. By showing the flow of a program explicitly we can build new intellectual structures for thinking about how procedures run.

    %p
      Many people who are able to become programmers have an aptitute for envisioning weaves of procedural flow in their mind. Choc makes procedure flow tangible. 

    %p
      In the timeline above we can relate to the program flow "geometrically" by seeing patterns in the timeline. 


  .large-1.columns
    &nbsp;


.row
  .large-12.columns
    %h2
      Demo 3 — 
      %b
        Show the state

    .choc-wrapper
      .canvas-container
        #triangle-fan-2-canvas
      #choc-editor-for-triangle-fan-2.canvas-editor

.row
  .large-1.columns
    &nbsp;
  .large-10.columns

    %p
      %em
        Click on the slider and then use the arrow keys to step through the code.

    %p
      As we show the flow
      %em structure
      we can also show step
      %em content.

    %p
      Looking at the code above, the 
      %tt triangle.fill
      line is impossibly dense. 

      If you had only the code to read, you might be able to tell that we're setting the 
      %tt fill
      of a 
      %tt triangle
      to a string that is an rgb value that changes with 
      %tt i
      \.
      But good luck trying to find out what color that actually is.

    %p
      With Choc, we can annotate 
      %em any library 
      to give us custom descriptions and timeline rendering.
      In the timeline above you can see rich cells that display 
      %b rotation
      , 
      %b shape
      , and 
      %b color
      \.


  .large-1.columns
    &nbsp;


.row
  .large-12.columns
    %h2
      Demo 4 — 
      %b
        Make time tangible

    .choc-wrapper
      .canvas-container
        .canvas-wrapper
          #frameCanvas
          #fader
          #previewCanvas

      #choc-editor-for-bouncing-ball.canvas-editor

.row
  .large-1.columns
    &nbsp;
  .large-10.columns
    %p
      Propositional content of programming is important, but it's only a part of a programmer's body of knowledge. We're also interested in knowledge that is more qualitative.

    %p
      Choc helps learners draw pathways from action-ways-of-knowing to symbolic-ways-of-knowing.
      You acquire action-knowledge by toying with the elements of an idea. Here, because we're able to play with the symbols, our action-knowledge is directly transferrable to symbolic-knowledge.  
      
    %p
      Try dragging around the constants above. Can you find the constant that relates to "bounciness"? There are two variables above that relate to the "floor". Can you find them?


  .large-1.columns
    &nbsp;


:javascript
  function startVoxelDemo() {
    console.log("Starting Voxel Demo");

    // http://fgnass.github.io/spin.js/#?lines=13&length=40&width=10&radius=12&corners=1.0&rotate=0&trail=76&speed=1.2&direction=1&hwaccel=on
    var opts = {
      lines: 13, // The number of lines to draw
      length: 40, // The length of each line
      width: 10, // The line thickness
      radius: 12, // The radius of the inner circle
      corners: 1, // Corner roundness (0..1)
      rotate: 0, // The rotation offset
      direction: 1, // 1: clockwise, -1: counterclockwise
      color: '#000', // #rgb or #rrggbb or array of colors
      speed: 1.2, // Rounds per second
      trail: 76, // Afterglow percentage
      shadow: false, // Whether to render a shadow
      hwaccel: true, // Whether to use hardware acceleration
      className: 'spinner', // The CSS class to assign to the spinner
      zIndex: 2e9, // The z-index (defaults to 2000000000)
      top: 'auto', // Top position relative to parent in px
      left: 'auto' // Left position relative to parent in px
    };
    var target = document.getElementById('voxel-preview-container');
    var spinner = new Spinner(opts).spin(target);

    $("#game").show();

    window.setTimeout(function (){
      // window.ChocGame.startVoxelDemo(function() {
      //  console.log("showing game");
      spinner.stop();
      $("#voxel-preview-container").hide();
      // });
    }, 1000);

    return false;
  }

.row.voxel
  .large-12.columns
    %h2
      Demo 5 — 
      %b
        Build a (mental) model

    #voxel-preview-container 
      %a{:href => "javascript:void(0)", :onclick => "startVoxelDemo(); return false;"}
        %img{:src => "/images/voxel-preload-play.png", :id => "voxel-preload-image"}

    .choc-wrapper
      .canvas-container
        #game
      #choc-editor-for-voxel.canvas-editor

.row
  .large-1.columns
    &nbsp;
  .large-10.columns
    %p
      %em
        In the Voxel world, use arrow keys to navigate. Use the 
        %tt space 
        button to jump. Hit 
        %tt space 
        twice to fly. Use 
        %tt shift 
        to move towards the ground. 

    %p
      Choc isn't limited to 2D canvas examples. Above we're interacting with a 
      %a{:href => "http://voxeljs.com/"} Voxel.js
      world. The Choc scrubbing loop is independent of the game loop.

    %p
      In this example, we're building a tower by 
      %a{:href => "https://banu.com/blog/7/drawing-circles/"} drawing a circle
      and repeating that process on the y-axis.

    %p
      We don't have to build a 
      %tt "brick"
      tower though. Try changing the first line to
      %tt "grass"
      or 
      %tt "bark"
      \. Try dragging the
      %tt radius
      or 
      %tt height
      \. 
        
    %p
      A goal of Choc is to encourage exploration and reflection. The hope is to give learners the ability to explore ideas without a bug being "wrong", "bad", or "a mistake". Hopefully as one learns to explore the properties of a microworld, they'll learn to transfer habits of exploration into the rest of their lives.

  .large-1.columns
    &nbsp;

.row
  .large-1.columns
    &nbsp;
  .large-10.columns

    %h2
      %b
        Create your own Chocs

    %p 
      Choc lessons should be captured in mind-sized bites.

    %p 
      By showing how the structure of a program can be decomposed into simpler, but still meaningful and coherant,structures, we're able to facilitate a pathway into how an algorithm works.
       
  .large-1.columns
    &nbsp;


.row
  .large-1.columns
    &nbsp;
  .large-10.columns
    %p
      This falls short of Bret Victor's original design. There are many things to be done [think to github]
    %p
      Installation instructions
  .large-1.columns
    &nbsp;

.row
  .large-1.columns
    &nbsp;
  .large-10.columns

    %h2
      %b
        Get notified about new demos
    %p
      This is only the beginning.

    %p
      / Begin MailChimp Signup Form
      #mc_embed_signup
        %form#mc-embedded-subscribe-form.validate{action: "http://willcodeforfoo.us6.list-manage1.com/subscribe/post?u=86d6f14c7cc955128485e3b8e&id=10b0695103", method: "post", name: "mc-embedded-subscribe-form", novalidate: "", target: "_blank"}
          .mc-field-group
            %label{for: "mce-EMAIL"}
              Email Address
              %span.asterisk *
            %input#mce-EMAIL.required.email{name: "EMAIL", type: "email", value: ""}/
          #mce-responses.clear
            #mce-error-response.response{style: "display:none"}
            #mce-success-response.response{style: "display:none"}
          .clear
            %input#mc-embedded-subscribe.button{name: "subscribe", type: "submit", value: "Subscribe"}/
      / End mc_embed_signup

  .large-1.columns
    &nbsp;

.row
  .large-1.columns
    &nbsp;
  .large-10.columns
    %p
      Made by Nate Murray & Ari Lerner in San Francisco - Fullstack.io

  .large-1.columns
    &nbsp;

#drag-this
#and-drag-this

/* Tour
-# %ol#tourGuide
-#   %li{:'data-tour' => '.slider-container',
-#       :'data-tipjoint' => 'top right',
-#       :'data-targetjoint' => 'top right',
-#       :'data-onshow' => 'console.log("showing first")'} 
-#     %p Slide to step through time
-#   %li{:'data-tour' => '#interactive_3',
-#       :'data-targetjoint' => 'middle',
-#       :'data-tipjoint' => 'top'}
-#     %p Try dragging the numbers with underlines
-#   %li{:'data-tour' => '.CodeMirror',
-#       :'data-targetjoint' => 'middle',
-#       :'data-tipjoint' => 'top'} 
-#     %p The code is fully editable
%script{:src => "/scripts/index/tour.js"}
